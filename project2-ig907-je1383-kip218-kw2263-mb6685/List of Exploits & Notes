Exploit 1 (SQL injection):
    Input username that was previously registered and add "#" to comment out password.
        #for some reason does not work
        Explanation: This is an SQL SELECT statement, SQL uses --, and /* */ for comments instead of #.

    username: "admin"
    password: "OR 1=1;--"


    #why 'admin'?
    /*Doesn't need to be admin, any existing account works. Admin is significant because it is a standard
    name for an account with permissions beyond those of a standard user.*/

Exploit 2 (Cookies):
  Use wireshark to intercept cookie. Use browser extension to edit the cookie and gain access.
  #Man in the Middle attack?
  #Could not intercept cookie using wireshark. Cookie could only be found when a user logged in on the same machine. Although this could be used to trick unsuspecting users, it isn't a valid exploit.

Exploit 3 (Broken Authentication):
  Sessions do not properly timeout when a window is closed, or after idling. If an account is accessed
  on a public computer and the user simply closes the browser and walks away, the next person to enter
  the site’s url will automatically be signed-in to the previous user’s account.


Exploit 4 (Command Injection):
  After login, use textbox to input:
  print()
  which will attempt to print the screen, prompting the user
  for which printer they want to use, number of pages, etc.


#In the textbox, if put end html "</html>", it will break the site.
